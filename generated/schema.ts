// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("spender", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }
}

export class TransferSchema extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Sender", Value.fromBytes(Bytes.empty()));
    this.set("Receiver", Value.fromBytes(Bytes.empty()));
    this.set("TokenValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferSchema entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferSchema entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferSchema", id.toString(), this);
    }
  }

  static load(id: string): TransferSchema | null {
    return changetype<TransferSchema | null>(store.get("TransferSchema", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Sender(): Bytes {
    let value = this.get("Sender");
    return value!.toBytes();
  }

  set Sender(value: Bytes) {
    this.set("Sender", Value.fromBytes(value));
  }

  get Receiver(): Bytes {
    let value = this.get("Receiver");
    return value!.toBytes();
  }

  set Receiver(value: Bytes) {
    this.set("Receiver", Value.fromBytes(value));
  }

  get TokenValue(): BigInt {
    let value = this.get("TokenValue");
    return value!.toBigInt();
  }

  set TokenValue(value: BigInt) {
    this.set("TokenValue", Value.fromBigInt(value));
  }
}

export class ApprovalSchema extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Owner", Value.fromBytes(Bytes.empty()));
    this.set("Spender", Value.fromBytes(Bytes.empty()));
    this.set("TokenValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalSchema entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ApprovalSchema entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ApprovalSchema", id.toString(), this);
    }
  }

  static load(id: string): ApprovalSchema | null {
    return changetype<ApprovalSchema | null>(store.get("ApprovalSchema", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Owner(): Bytes {
    let value = this.get("Owner");
    return value!.toBytes();
  }

  set Owner(value: Bytes) {
    this.set("Owner", Value.fromBytes(value));
  }

  get Spender(): Bytes {
    let value = this.get("Spender");
    return value!.toBytes();
  }

  set Spender(value: Bytes) {
    this.set("Spender", Value.fromBytes(value));
  }

  get TokenValue(): BigInt {
    let value = this.get("TokenValue");
    return value!.toBigInt();
  }

  set TokenValue(value: BigInt) {
    this.set("TokenValue", Value.fromBigInt(value));
  }
}

export class BalanceSchema extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalanceSchema entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BalanceSchema entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BalanceSchema", id.toString(), this);
    }
  }

  static load(id: string): BalanceSchema | null {
    return changetype<BalanceSchema | null>(store.get("BalanceSchema", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Address(): Bytes | null {
    let value = this.get("Address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Address(value: Bytes | null) {
    if (!value) {
      this.unset("Address");
    } else {
      this.set("Address", Value.fromBytes(<Bytes>value));
    }
  }

  get Balance(): BigInt {
    let value = this.get("Balance");
    return value!.toBigInt();
  }

  set Balance(value: BigInt) {
    this.set("Balance", Value.fromBigInt(value));
  }
}
